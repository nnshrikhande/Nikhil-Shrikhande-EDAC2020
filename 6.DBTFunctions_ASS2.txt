CREATE DATABASE STOREPROCEDURE_ASSI2;
USE STOREPROCEDURE_ASSI2;

Create table EMP ( 
			EMPNO numeric(4) not null, 
            ENAME varchar(30) not null, 
            JOB varchar(10), 
            MGR numeric(4), 
            HIREDATE date, 
            SAL numeric(7,2), 
            DEPTNO numeric(2) 
            ); 
		DESC EMP;
        
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1000,  'Manish' , 'SALESMAN', 1003,  '2020-02-18', 600,  30) ;
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1001,  'Manoj' , 'SALESMAN', 1003,  '2018-02-18', 600,  30) ;
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1002 , 'Ashish', 'SALESMAN',1003 , '2013-02-18',  750,  30 );
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1004,  'Rekha', 'ANALYST', 1006 , '2001-02-18', 3000,  10);
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1005 , 'Sachin', 'ANALYST', 1006 ,  '2019-02-18', 3000, 10 );
INSERT INTO EMP (EMPNO ,ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO ) VALUES(1006,  'Pooja',  'MANAGER' , null    , '2000-02-18' ,6000, 10 );   
SELECT * FROM EMP;         
            
-- 1. Write function that accepts a positive number from a user and displays its factorial on the screen.
delimiter $$
CREATE FUNCTION fun(val int) returns int
begin
declare facto int default 1;
while (val > 0) do
set facto = facto * val;
set val = val - 1;
end while;
return facto;
end $$

drop function fun;
select fun(3);
select fun(5);

/* **************************************************************************************** */
-- 2. Write a function that accepts a positive number ‘n’ and displays whether that number is a Prime number or not.
delimiter &&
create function fun2(val int) returns varchar(20)
begin 
 declare M, I int;
 set I = 2;
set M = val / 2;

if val = 0 || val = 1 then
return "No is NOT PRIME";
else
L1:loop
while I<=M do
if val % 2= 0 then
Return "No is NOT PRIME";
leave L1;
else
set I=I+1;
iterate L1;
END IF;
END WHILE;
RETURN 'No is PRIME';
END LOOP L1;
end if ;
end &&

drop function fun2;
select fun2(4)&&
select fun2(17)&&

/* ********************************************************************************************** */
-- 3. Write a function to Convert an inputed number of inches into yards, feet, and inches. For example,
     -- 124 inches equals 3 yards, 1 foot, and 4 inches.
delimiter $$
create function fun3( val int(20)) returns varchar(200)
begin

return concat(val ,' inches ', round(val/36),' yards ',round(val/12),' foot ');
end;$$

 -- drop function Que03;

select fun3(12);
select fun3(124);

/* ********************************************************************************* */
-- 4. Write a function to update salary of the employees of specified dept by 10%. Take dept no as parameter.
delimiter $$
create function fun4(dept int) returns varchar(20)
begin
update emp set sal =(sal + sal*(10/100) ) where deptno=dept;
return 'updated';
end $$

drop function fun4;
select fun4(30);
select * from emp$$

/* ************************************************************************************** */
-- 5. Create a function named USER_ANNUAL_COMP that has a parameter p_eno for passing on the values of  an 
-- employee number of the employee and p_comp for passing the compansation. In the function calculates and 
-- returns the annual compensation of the employee by using the following formula.annual_compensation =  (p_sal+p_comm)*12
-- If the salary or commission value is NULL then zero should be substituted for it.  Give a call to USER_ANNUAL_COMP.
delimiter $$
create function fun5( p_eno int , p_comp int) returns int(100)
begin
		declare p_sal int ;
	if (p_comp = isnull(p_comp) || ' ') then
			return 0;
    else
		set p_sal = (select sal from emp where empno = p_eno );
		return (p_sal + p_comp ) *12;
   end if;
end $$
drop function fun5$$
select fun5( 1002 , 123 )$$

/* ********************************************************************************************* */
-- 6. Create a procedure called USER_QUERY_EMP that accepts three parameters. Parameter p_myeno is of IN parameter
 -- mode which provides the empno value. The other two parameters p_myjob and p_mysal are of OUT mode. 
 -- The procedure retrieves the salary and job of an employee with the provided employee number and assigns those
 -- to the two OUT parameters respectively. The procedure should raise the error if the empno does not exist in the 
 -- EMP table by displaying an appropriate message
 delimiter $$
create procedure proc6(in p_myeno numeric(4) , out p_myjob varchar(10) , out p_mysal numeric(7,2) ) 
begin
	declare a1 int;
     set a1 = (select count(*) from emp where empno = p_myeno);
	if   a1 = 0   then
	select ' emp number is not in table';
    else
	select  job  , sal into  p_myjob ,p_mysal from emp where empno = p_myeno;
    end if;
end $$

call proc6( 1002 , @job , @sal )$$
select  @job , @sal  $$

call proc6( 100 , @job , @sal )$$
 
 /* ************************************************************************************** */
 -- 7. Create a procedure to print the inputted string in reverse order. If  inputted string is null display
 --    an appropriate message
 delimiter $$
create procedure proc7(inout str varchar(20))
begin
	if (str = ' ' || isnull(str) ) then
    select 'String is null';
    else
    select reverse(str) into str;
    end if;
end $$

set @x = 'Nikhil'$$   -- if string is pass then
call proc7(@x)$$
select @x $$

set @str1 = null $$  -- if string is null
call proc7(@str1)$$

/* ************************************************************************************** */
-- 8. Create a procedure named ‘tabledetails’ which gives all the details of a particular table stored in database.
delimiter $$
create procedure proc8()
begin
		desc STOREPROCEDURE_ASSI2.titles;
end $$

call proc8;



